// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.esupsignature.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.esupportail.esupsignature.domain.SignRequest;

privileged aspect SignRequest_Roo_Finder {
    
    public static Long SignRequest.countFindSignRequestsByCreateByEquals(String createBy) {
        if (createBy == null || createBy.length() == 0) throw new IllegalArgumentException("The createBy argument is required");
        EntityManager em = SignRequest.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SignRequest AS o WHERE o.createBy = :createBy", Long.class);
        q.setParameter("createBy", createBy);
        return ((Long) q.getSingleResult());
    }
    
    public static Long SignRequest.countFindSignRequestsByRecipientEmailEquals(String recipientEmail) {
        if (recipientEmail == null || recipientEmail.length() == 0) throw new IllegalArgumentException("The recipientEmail argument is required");
        EntityManager em = SignRequest.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM SignRequest AS o WHERE o.recipientEmail = :recipientEmail", Long.class);
        q.setParameter("recipientEmail", recipientEmail);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<SignRequest> SignRequest.findSignRequestsByCreateByEquals(String createBy) {
        if (createBy == null || createBy.length() == 0) throw new IllegalArgumentException("The createBy argument is required");
        EntityManager em = SignRequest.entityManager();
        TypedQuery<SignRequest> q = em.createQuery("SELECT o FROM SignRequest AS o WHERE o.createBy = :createBy", SignRequest.class);
        q.setParameter("createBy", createBy);
        return q;
    }
    
    public static TypedQuery<SignRequest> SignRequest.findSignRequestsByCreateByEquals(String createBy, String sortFieldName, String sortOrder) {
        if (createBy == null || createBy.length() == 0) throw new IllegalArgumentException("The createBy argument is required");
        EntityManager em = SignRequest.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM SignRequest AS o WHERE o.createBy = :createBy");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<SignRequest> q = em.createQuery(queryBuilder.toString(), SignRequest.class);
        q.setParameter("createBy", createBy);
        return q;
    }
    
    public static TypedQuery<SignRequest> SignRequest.findSignRequestsByRecipientEmailEquals(String recipientEmail) {
        if (recipientEmail == null || recipientEmail.length() == 0) throw new IllegalArgumentException("The recipientEmail argument is required");
        EntityManager em = SignRequest.entityManager();
        TypedQuery<SignRequest> q = em.createQuery("SELECT o FROM SignRequest AS o WHERE o.recipientEmail = :recipientEmail", SignRequest.class);
        q.setParameter("recipientEmail", recipientEmail);
        return q;
    }
    
    public static TypedQuery<SignRequest> SignRequest.findSignRequestsByRecipientEmailEquals(String recipientEmail, String sortFieldName, String sortOrder) {
        if (recipientEmail == null || recipientEmail.length() == 0) throw new IllegalArgumentException("The recipientEmail argument is required");
        EntityManager em = SignRequest.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM SignRequest AS o WHERE o.recipientEmail = :recipientEmail");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<SignRequest> q = em.createQuery(queryBuilder.toString(), SignRequest.class);
        q.setParameter("recipientEmail", recipientEmail);
        return q;
    }
    
}

// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.esupportail.esupnfccarteculture.domain;

import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.esupportail.esupnfccarteculture.domain.Etudiant;

privileged aspect Etudiant_Roo_Finder {
    
    public static Long Etudiant.countFindEtudiantsByCsnEquals(String csn) {
        if (csn == null || csn.length() == 0) throw new IllegalArgumentException("The csn argument is required");
        EntityManager em = Etudiant.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Etudiant AS o WHERE o.csn = :csn", Long.class);
        q.setParameter("csn", csn);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Etudiant.countFindEtudiantsByEppnEquals(String eppn) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        EntityManager em = Etudiant.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Etudiant AS o WHERE o.eppn = :eppn", Long.class);
        q.setParameter("eppn", eppn);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Etudiant.countFindEtudiantsByEppnLike(String eppn) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        eppn = eppn.replace('*', '%');
        if (eppn.charAt(0) != '%') {
            eppn = "%" + eppn;
        }
        if (eppn.charAt(eppn.length() - 1) != '%') {
            eppn = eppn + "%";
        }
        EntityManager em = Etudiant.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Etudiant AS o WHERE LOWER(o.eppn) LIKE LOWER(:eppn)", Long.class);
        q.setParameter("eppn", eppn);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Etudiant.countFindEtudiantsByEtablissementEquals(String etablissement) {
        if (etablissement == null || etablissement.length() == 0) throw new IllegalArgumentException("The etablissement argument is required");
        EntityManager em = Etudiant.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Etudiant AS o WHERE o.etablissement = :etablissement", Long.class);
        q.setParameter("etablissement", etablissement);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Etudiant.countFindEtudiantsByNomEquals(String nom) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        EntityManager em = Etudiant.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Etudiant AS o WHERE o.nom = :nom", Long.class);
        q.setParameter("nom", nom);
        return ((Long) q.getSingleResult());
    }
    
    public static Long Etudiant.countFindEtudiantsByNomLike(String nom) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        nom = nom.replace('*', '%');
        if (nom.charAt(0) != '%') {
            nom = "%" + nom;
        }
        if (nom.charAt(nom.length() - 1) != '%') {
            nom = nom + "%";
        }
        EntityManager em = Etudiant.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Etudiant AS o WHERE LOWER(o.nom) LIKE LOWER(:nom)", Long.class);
        q.setParameter("nom", nom);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByCsnEquals(String csn) {
        if (csn == null || csn.length() == 0) throw new IllegalArgumentException("The csn argument is required");
        EntityManager em = Etudiant.entityManager();
        TypedQuery<Etudiant> q = em.createQuery("SELECT o FROM Etudiant AS o WHERE o.csn = :csn", Etudiant.class);
        q.setParameter("csn", csn);
        return q;
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByCsnEquals(String csn, String sortFieldName, String sortOrder) {
        if (csn == null || csn.length() == 0) throw new IllegalArgumentException("The csn argument is required");
        EntityManager em = Etudiant.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Etudiant AS o WHERE o.csn = :csn");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Etudiant> q = em.createQuery(queryBuilder.toString(), Etudiant.class);
        q.setParameter("csn", csn);
        return q;
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByEppnEquals(String eppn) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        EntityManager em = Etudiant.entityManager();
        TypedQuery<Etudiant> q = em.createQuery("SELECT o FROM Etudiant AS o WHERE o.eppn = :eppn", Etudiant.class);
        q.setParameter("eppn", eppn);
        return q;
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByEppnEquals(String eppn, String sortFieldName, String sortOrder) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        EntityManager em = Etudiant.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Etudiant AS o WHERE o.eppn = :eppn");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Etudiant> q = em.createQuery(queryBuilder.toString(), Etudiant.class);
        q.setParameter("eppn", eppn);
        return q;
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByEppnLike(String eppn) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        eppn = eppn.replace('*', '%');
        if (eppn.charAt(0) != '%') {
            eppn = "%" + eppn;
        }
        if (eppn.charAt(eppn.length() - 1) != '%') {
            eppn = eppn + "%";
        }
        EntityManager em = Etudiant.entityManager();
        TypedQuery<Etudiant> q = em.createQuery("SELECT o FROM Etudiant AS o WHERE LOWER(o.eppn) LIKE LOWER(:eppn)", Etudiant.class);
        q.setParameter("eppn", eppn);
        return q;
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByEppnLike(String eppn, String sortFieldName, String sortOrder) {
        if (eppn == null || eppn.length() == 0) throw new IllegalArgumentException("The eppn argument is required");
        eppn = eppn.replace('*', '%');
        if (eppn.charAt(0) != '%') {
            eppn = "%" + eppn;
        }
        if (eppn.charAt(eppn.length() - 1) != '%') {
            eppn = eppn + "%";
        }
        EntityManager em = Etudiant.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Etudiant AS o WHERE LOWER(o.eppn) LIKE LOWER(:eppn)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Etudiant> q = em.createQuery(queryBuilder.toString(), Etudiant.class);
        q.setParameter("eppn", eppn);
        return q;
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByEtablissementEquals(String etablissement) {
        if (etablissement == null || etablissement.length() == 0) throw new IllegalArgumentException("The etablissement argument is required");
        EntityManager em = Etudiant.entityManager();
        TypedQuery<Etudiant> q = em.createQuery("SELECT o FROM Etudiant AS o WHERE o.etablissement = :etablissement", Etudiant.class);
        q.setParameter("etablissement", etablissement);
        return q;
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByEtablissementEquals(String etablissement, String sortFieldName, String sortOrder) {
        if (etablissement == null || etablissement.length() == 0) throw new IllegalArgumentException("The etablissement argument is required");
        EntityManager em = Etudiant.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Etudiant AS o WHERE o.etablissement = :etablissement");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Etudiant> q = em.createQuery(queryBuilder.toString(), Etudiant.class);
        q.setParameter("etablissement", etablissement);
        return q;
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByNomEquals(String nom) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        EntityManager em = Etudiant.entityManager();
        TypedQuery<Etudiant> q = em.createQuery("SELECT o FROM Etudiant AS o WHERE o.nom = :nom", Etudiant.class);
        q.setParameter("nom", nom);
        return q;
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByNomEquals(String nom, String sortFieldName, String sortOrder) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        EntityManager em = Etudiant.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Etudiant AS o WHERE o.nom = :nom");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Etudiant> q = em.createQuery(queryBuilder.toString(), Etudiant.class);
        q.setParameter("nom", nom);
        return q;
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByNomLike(String nom) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        nom = nom.replace('*', '%');
        if (nom.charAt(0) != '%') {
            nom = "%" + nom;
        }
        if (nom.charAt(nom.length() - 1) != '%') {
            nom = nom + "%";
        }
        EntityManager em = Etudiant.entityManager();
        TypedQuery<Etudiant> q = em.createQuery("SELECT o FROM Etudiant AS o WHERE LOWER(o.nom) LIKE LOWER(:nom)", Etudiant.class);
        q.setParameter("nom", nom);
        return q;
    }
    
    public static TypedQuery<Etudiant> Etudiant.findEtudiantsByNomLike(String nom, String sortFieldName, String sortOrder) {
        if (nom == null || nom.length() == 0) throw new IllegalArgumentException("The nom argument is required");
        nom = nom.replace('*', '%');
        if (nom.charAt(0) != '%') {
            nom = "%" + nom;
        }
        if (nom.charAt(nom.length() - 1) != '%') {
            nom = nom + "%";
        }
        EntityManager em = Etudiant.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Etudiant AS o WHERE LOWER(o.nom) LIKE LOWER(:nom)");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Etudiant> q = em.createQuery(queryBuilder.toString(), Etudiant.class);
        q.setParameter("nom", nom);
        return q;
    }
    
}
